@charset "UTF-8";

/* || GENERAL STYLES */
/* Colors */
:root {
  --color-base: #eac375;
  --color-main: #3b5e92;
  --color-accent: #8f9eb5;
  --color-content-bg: rgb(143, 158, 181, 0.6);
  --color-body-bg: #ffffff;
  --color-body-txt: #000000;
  /* --color-btn-bg: #e9654b;
  --color-btn-bg-hover: #ffffff;
  --color-btn-txt: #ffffff; */
}

html {
  /* 1rem = 10pxに設定する */
  font-size: 62.5%;
  /* リンク内スクロール */
  scroll-behavior: smooth;
}
body {
  background-color: var(--color-body-bg);
  color: var(--color-body-txt);
  font-size: 1.6rem;
  font-family: "Yu Mincho", "YuMincho", serif;
}

/* || SITEWIDE */
a {
  text-decoration: none;
}
img {
  width: 100%;
  vertical-align: bottom;
  object-fit: cover;
}
li {
  list-style: none;
}

/* Clamp */  
*, *::before, *::after {
  /* 最小サイズ、 最大サイズ、 最小画面幅、最大画面幅（単位px） */
  --min-size: 10;
  --max-size: 36;
  --min-viewport: 375;
  --max-viewport: 750;

  /* a 傾き */
  --slope: calc((var(--max-size) - var(--min-size))/ (var(--max-viewport) - var(--min-viewport)));
  /* b 切片 */
  --intercept: calc(var(--min-size) - var(--slope) * var(--min-viewport));
  /* y = ax + b 可変サイズ */
  --fluid-size: calc(var(--slope) * 100vw + var(--intercept) * 1px);
  /* clamp(最小サイズ, 可変サイズ, 最大サイズ) */
  --clamp-size: clamp(var(--min-size) * 1px, var(--fluid-size), var(--max-size) * 1px);

  --min-size_w: 10;
  --max-size_w: 36;
  --slope_w: calc((var(--max-size_w) - var(--min-size_w))/ (var(--max-viewport) - var(--min-viewport)));
  --intercept_w: calc(var(--min-size_w) - var(--slope_w) * var(--min-viewport));
  --fluid-size_w: calc(var(--slope_w) * 100vw + var(--intercept_w) * 1px);
  --clamp-size_w: clamp(var(--min-size_w) * 1px, var(--fluid-size_w), var(--max-size_w) * 1px);

  --min-size_h: 10;
  --max-size_h: 36;
  --slope_h: calc((var(--max-size_h) - var(--min-size_h))/ (var(--max-viewport) - var(--min-viewport)));
  --intercept_h: calc(var(--min-size_h) - var(--slope_h) * var(--min-viewport));
  --fluid-size_h: calc(var(--slope_h) * 100vw + var(--intercept_h) * 1px);
  --clamp-size_h: clamp(var(--min-size_h) * 1px, var(--fluid-size_h), var(--max-size_h) * 1px);

  --min-size_mt: 10;
  --max-size_mt: 36;
  --slope_mt: calc((var(--max-size_mt) - var(--min-size_mt))/ (var(--max-viewport) - var(--min-viewport)));
  --intercept_mt: calc(var(--min-size_mt) - var(--slope_mt) * var(--min-viewport));
  --fluid-size_mt: calc(var(--slope_mt) * 100vw + var(--intercept_mt) * 1px);
  --clamp-size_mt: clamp(var(--min-size_mt) * 1px, var(--fluid-size_mt), var(--max-size_mt) * 1px);
}


.section__title {
  display: block;
  text-align: center;
  /* font-size: 3.6rem; */
  --min-size: 24;
  --max-size: 36;
  font-size: var(--clamp-size);
  /* font-size: clamp(2.4rem, 5vw, 3.6rem); */
}
.section__subtitle{
  display: block;
  /* font-size: clamp(1.4rem, 3vw, 2.2rem); */
  --min-size: 14;
  --max-size: 22;
  font-size: var(--clamp-size);
}
.content__title {
  text-align: left;
  /* font-size: clamp(1.2rem, 3.7vw, 2.8rem); */
  --min-size: 12;
  --max-size: 28;
  font-size: var(--clamp-size);
}



/* || UTILITIES */

/* || Tab Styles */
/*tabの形状*/
.tab{
  display: flex;
  flex-wrap: nowrap;
  justify-content: center;
  border-bottom: 1px solid black;
}
.tab li {
  border-top: 1px solid black;
  border-left: 1px solid black;
  position: relative;
}
.tab__page {
  display: block;
  box-sizing: border-box;

  position: relative;
}
.tab li:last-child {
  border-right: 1px solid black;
}
.tab__page:before {
  display: inline-block;
  margin-right: .5em;
content: "";
width: 1em;
height: 1em;
background-size: contain;
background-position: 0 -0.15em;

}



/*liにactiveクラスがついた時の形状*/

.tab li.active::after{
  position: absolute;
  bottom: -3px;
  left: 1px;
  content: "";
  width: calc(100% - 2px );
  height: 5px;
  background-color: white;
}

/*エリアの表示非表示と形状*/
.area {
  display: none;/*はじめは非表示*/
  opacity: 0;/*透過0*/
  background: #fff;
  padding-top: 1em;
  padding-bottom: 12vw;
  /* padding:50px 20px; */
}

/*areaにis-activeというクラスがついた時の形状*/
.area.is-active {
    display: block;/*表示*/
    opacity: 1;


    /*animation-name: displayAnime;ふわっと表示させるためのアニメーション */
    /* animation-duration: 2s;
    animation-fill-mode: forwards;*/
}

@keyframes displayAnime{
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}



/* || Calendar Styles */
input[type="date"] {
  position: relative;

}
input[type="date"]::-webkit-calendar-picker-indicator {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: auto;
  height: auto;
  background: transparent;
  cursor: pointer;
}
input[type="date"]::after {
  content: '';
  background-image: url(../img/calendar.svg);
  background-repeat: no-repeat;
  background-size: contain;
  background-position: 0 0;
  width: 2em;
  height: 2em;
  position: absolute;
  top: 46%;
  right: 5vw;
  transform: translateY(-50%);
  pointer-events: none;
}





/* || Checkbox Styles */
/*リセット */
input[type="checkbox"]  {
  margin: 0;
  padding: 0;
  background: none;
  border: none;
  border-radius: 0;
  outline: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}

/* チェックボックスデザイン */

input[type="checkbox"] {
  cursor: pointer;
  padding-left: 4vw;/*label手前にチェックボックス用の余白を開ける*/
  vertical-align: middle;
  /* position: relative; */
}
input[type="checkbox"]::before,
input[type="checkbox"]::after {
  content: "";
  display: block; 
  position: absolute;
}
input[type="checkbox"]::before {
  background-color: var(--color-accent);
  border-radius: 0%;
  border: 1px solid white;
  width: 5vw;/*チェックボックスの横幅*/
  height: 5vw;/*チェックボックスの縦幅*/
  transform: translateY(-50%);
  top: 50%;
}
input[type="checkbox"]::after {
  opacity: 0;/*チェック前は非表示*/
  background-image: url(../img/check.svg);
  background-repeat: no-repeat;
  background-size: contain;
  background-position: 0;
  width: 7vw;
  height: 7vw;
  transform: translateY(-50%);
  top: 45%;
}

input[type="checkbox"]:checked::after {
  opacity: 1;/*チェック後表示*/
}



/* || Dropdown Styles */
.dropdown {
width: 100%;
/* height: 60px; */
color: white;
  background-color: var(--color-accent);
  display: inline-block;
  padding: 1em;
  cursor: pointer;
}
/* Select要素には疑似要素が当てられないので親要素から当てる必要がある */
li:has(>.dropdown) {
  position: relative;
}
li:has(>.dropdown)::after {
  content: "";
  display: block;
  width: 2vw;
  height: 2vw;
  border-top: 1px solid white;
  border-right: 1px solid white;
  transform: rotate(135deg);
position: absolute;
right: 5vw;
top: calc(50% + 1vw);
pointer-events: none;
}

/* || Button Styles */
.basic-button {
  display: inline-block;
  width: 300px;
  max-width: 100%;
  padding: 20px 10px;
  background-color: #eac375;
  border: 2px solid transparent;
  box-shadow: 0 3px 6px rgba(0, 0, 0, .16);
  color: white;
  font-size: 1.6rem;
  text-align: center;
  text-decoration: none;
  transition: 0.25s;
}
.basic-button:focus,
.basic-button:hover {
  background-color: white;
  border-color: currentColor;
  color: #eac375;
}


.search-button {
  position: relative;
  display: inline-block;
  padding: 0.8em 3em 1.4em;
  /* width: 346px; */
  border-radius: 12px;
  color: white;
  background-color: var(--color-base);
  border: 1px solid #ccc;
  outline: none;
  box-shadow: 0px 1px 4px 0px rgba(0, 0, 0, 0.5);
  /*アニメーションの設定*/
  transition: all .3s;
}
.search-button::before {
  display: inline-block;
  margin-right: .5em;
  content: "";
  width: 1.6em;
  height: 1.6em;
  background-size: contain;
  background-image: url(../img/Frame.svg);
  transform: translateY(30%);
}
/*hoverをしたらボックスの影が拡がり色が濃くなる*/
.search-button:focus,
.search-button:hover {
  /* box-shadow: 0 1px 10px rgba(0, 0, 0, 0.4), 0 0 50px rgba(128, 128, 128, 0.1) ; */
  box-shadow: 0px 1px 10px 0px rgba(0, 0, 0, 0.5);
  border-color: transparent;
}
/* FIXME: 後で */
/* ボタン共通設定 */
.btn04 {
  /*線の基点とするためrelativeを指定*/
position: relative;
  /*ボタンの形状*/
display:inline-block;
  padding: 10px 30px;

color:#333;
border:1px solid #ccc;
  text-decoration: none;
  outline: none;
  /*はみ出す背景色を隠す*/
overflow: hidden;
}

/*hoverした際のボタンの形状*/
.btn04:hover {
color:#ccc;
border-color: transparent;
  /*色の変化を遅らせる*/
transition-delay: .6s;
}

/*線の設定*/
.btn04 span{
  display: block;
  z-index: 2;
}

.main-button {
  /*線の基点とするためrelativeを指定*/
  position: relative;
  /*ボタンの形状*/
  display: inline-block;

  border: 1px solid white;
  text-decoration: none;
  outline: none;
  /*はみ出す背景色を隠す*/
  overflow: hidden;
  display: flex;
  justify-content: center;
  align-items: center;
  
}


.main-button {
  /* padding: 10px 30px; */
  max-width: 300px;
  --min-size_w: 80;
  --max-size_w: 300;
  width: var(--clamp-size_w);
  /* width: clamp(80px, calc(0.5867 * 100vw - 140px), 300px); */
  max-height: 81px;
  --min-size_h: 25;
  --max-size_h: 81;
  height: var(--clamp-size_h);
  /* height: clamp(25px, calc(0.149 * 100vw - 31px), 81px); */
  --min-size: 12;
  --max-size: 30;
  font-size: var(--clamp-size);
}

/*hoverした際のボタンの形状*/
.main-button:hover {
  color: white;
  border-color: transparent;
  /*色の変化を遅らせる*/
  transition-delay: 0.6s;
}
.main-button--gold:hover {
  color: var(--color-base);
  border-left: 3px solid var(--color-base);
  border-right: 3px solid var(--color-base);
}
/*線の設定*/
.main-button span {
  /* position: absolute; */
  display: block;
  z-index: 2;
  top: 0;
  left: 18%;

  /* padding: 10px 30px 0px 28px; */
  /* width: 398px; */
  /* height: 58px; */
  /* border: 1px solid red; */
}

/*== 線から塗に変化（左から右） */

/*線の設定*/
.borderleft span::before,
.borderleft span::after {
  content: "";
  /*絶対配置で線の位置を決める*/
  position: absolute;
  z-index: 2;
  width: 0;
  height: 1px;
  /*線の形状*/
  background: var(--color-accent);
  /*アニメーションの設定*/
  transition: all 0.3s;
}
.borderleft--gold span:before,
.borderleft--gold span:after {
  height: 3px;
  background: var(--color-base);
}
/*左上線*/
.borderleft span::before {
  left: 0;
  top: 0;
}

/*左下線*/
.borderleft span::after {
  left: 0;
  bottom: 0;
}

/*hoverをすると線が伸びる*/
.borderleft:hover span::before,
.borderleft:hover span::after {
  width: 100%;
  width: 0%;
}
.borderleft--gold:hover span::before,
.borderleft--gold:hover span::after {
  width: 100%;

}
/*背景の設定*/
.borderleft::before {
  content: "";
  /*絶対配置で線の位置を決める*/
  position: absolute;
  left: 0;
  bottom: 0;
  z-index: 0;

  /*背景の形状*/
  height: 100%;
  width: 0;
  background: var(--color-accent);
  /*アニメーションの設定*/
  transition: all 0.3s;
}

.borderleft--gold::before {
  background: rgba(255, 255, 255, 0.9);
}

/*hoverをすると背景が伸びる*/
.borderleft:hover::before {
  width: 100%;
  /*0.4秒遅れてアニメーション*/
  transition-delay: 0.4s;
}

/* || Card Styles */
.card {
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);

}

.card__img-wrapper {
  position: relative;
  padding-top: 56.25%;
  padding-top: 66.25%;
  overflow: hidden;

}
.card__img {
  position: absolute;
  /* top: 50%; */
  width: 100%;
  /* transform: translateY(-50%); */
  top: 0;
  left: 0;
}
.card__body {
  padding: 15px;
  color: black;
  text-align: left;
}
.card__body > *:last-child {
  margin-bottom: 0;
}
.card__date {
  color: black;
  /* font-size: clamp(1.4rem, 2.7vw, 2rem); */
  --min-size: 14;
  --max-size: 20;
  font-size: var(--clamp-size);
}
.card__title {
  margin-bottom: 5px;
  /* font-size: clamp(1.4rem, 2.5vw, 1.8rem); */
  --min-size: 14;
  --max-size: 18;
  font-size: var(--clamp-size);
  font-weight: bold;
}
.card__text {
  color: black;
  /* font-size: clamp(1rem, 2vw, 1.4rem); */
  --min-size: 10;
  --max-size: 14;
  font-size: var(--clamp-size);
}
/* || SLIDER  */

.card {
      /* dim unselected */
      opacity: 0.7;
      -webkit-transform: scale(0.85);
              transform: scale(0.85);
      -webkit-filter: blur(5px);
              filter: blur(5px);
      -webkit-transition: opacity 0.3s, -webkit-transform 0.3s, transform 0.3s, -webkit-filter 0.3s, filter 0.3s;
              transition: opacity 0.3s, transform 0.3s, filter 0.3s;
}
/* brighten selected  */
.card.is-selected {
  opacity: 1;
  -webkit-transform: scale(1);
          transform: scale(1);
  -webkit-filter: none;
          filter: none;
}
.flickity-page-dots{
  display: flex;
  justify-content: center;
  align-items: center;
}
.flickity-page-dots .dot {
  width: 1.6vw;
  height: 1.6vw;
  opacity: 1;
  background-color: white;
  
}
/* fill-in selected dot */
.flickity-page-dots .dot.is-selected {
  width: 2.4vw;
  height: 2.4vw;
  background: var(--color-base);
}

/* || Scroll Styles  */
.scroll {
  display: block;
  width: 7vw;
  height: 7vw;
  margin: 13vw auto 0;
  border-top: 2px solid black;
  border-right: 2px solid black;
  transform: rotateZ(-45deg);
}

/* || MENU  */
  /*==================================================
　5-2-4 MENUがCLOSEに
===================================*/
/* TODO: スクロールバーを外す */
  /*ボタン外側※レイアウトによってpositionや形状は適宜変更してください*/
  .openbtn {
    /*ボタン内側の基点となるためrelativeを指定。
追従するナビゲーションの場合はfixed＋top、rightといった位置をセットで指定*/

    cursor: pointer;


  }

  /*ボタン内側*/
  .openbtn span {
    display: inline-block;
    transition: all 0.4s; /*アニメーションの設定*/
    position: absolute;
    left: 25%;
    height: 2%;
    border-radius: 5px;
    background: #fff;
    width: 50%;
    z-index: 100;
  }

  .openbtn span:nth-of-type(1) {
    top: 20%;
  }

  .openbtn span:nth-of-type(2) {
    top: 32%;
  }

  .openbtn span:nth-of-type(3) {
    top: 44%;
  }

 
  /*activeクラスが付与されると線が回転して×になり、Menu⇒Closeに変更*/
.openbtn.active {
  background-color: transparent;
}

  .openbtn.active span:nth-of-type(1) {
top: 37%;
left: 25%;
    transform: translateY(50%) rotate(-45deg);
    width: 45%;
  }

  .openbtn.active span:nth-of-type(2) {
    opacity: 0;
  }

  .openbtn.active span:nth-of-type(3) {

    top: 40%;
    left: 25%;
    transform: translateY(-50%) rotate(45deg);
    width: 45%;
  }

  .openbtn.active span:nth-of-type(3)::after {
    content: ""; /*3つ目の要素のafterにClose表示を指定*/
    /* transform: translateY(0) rotate(-45deg);
    top: 5px;
    left: 4px; */
  }
  .openbtn.active p {
    display: none;

  }
  .header__search.panelactive{
    display: none;
  }
  .header__lang.panelactive{
    display: none;
  }
  .header__logo.panelactive {
    background-color: transparent;
  }
  /*========= ナビゲーションのためのCSS ===============*/
/* TODO: 背景画像書き換え */
  #g-nav {
    /* display: none; */
    /*position:fixed;にし、z-indexの数値を大きくして前面へ*/
    position: fixed;
    z-index: 99;
    /*ナビのスタート位置と形状*/
    /* top: -120%; */
    top: 0;
    left: 0;
    opacity: 0;
    pointer-events: none;
    width: 100%;
    height: 100vh;
    background-image: url(../img/menu_sp.webp);
    background-position: center;
    background-size: cover;
    background-repeat: no-repeat;
    /*動き*/
    transition: all 1.6s;
  }

  /*アクティブクラスがついたら位置を0に*/
  #g-nav.panelactive {
    /* top: 0; */
    opacity: 1;
    pointer-events: initial;
  }

/* || ANIMATIONS  */





/* TODO: 親にoverflow-x:hidden; */
/* TODO:　インライン要素には.span{display:block;} */
.fadeIn{
  
  animation-name:fadeInAnime;
  animation-duration: 1s;

  animation-fill-mode: forwards;
  }
  
  @keyframes fadeInAnime{
    from {
      opacity: 0;
    }
  
    to {
      opacity: 1;
    }
  }


.fadeLeft{
  animation-name:fadeLeftAnime;
  animation-duration: 2s;
  animation-fill-mode:forwards;

  opacity:0;
  }
  
  @keyframes fadeLeftAnime{
    from {
      opacity: 0;
    transform: translateX(-300px);
    }
  
    to {
      opacity: 1;
    transform: translateX(0);
    }
  }

  .fadeLeftUp{
    transition: .7s ease-in-out ;
    }
    


  .fadeRight{
    animation-name:fadeRightAnime;
    animation-duration: 1.5s;
    animation-fill-mode:forwards;
    opacity:0;
    }
    
    @keyframes fadeRightAnime{
      from {
        opacity: 0;
      transform: translateX(100px);
      }
    
      to {
        opacity: 1;
      transform: translateX(0);
      }
    }

    .fadeLeftUp{
      animation-name:fadeLeftUpAnime;
      animation-duration: 1.5s;
      animation-fill-mode:forwards;
      opacity:0;
    }
    @keyframes fadeLeftUpAnime{
      from {
        opacity: 0;
      transform: translate(-100px, 100px);
      }
    
      to {
        opacity: 1;
      transform: translate(0, 0);
      }
    }

    .fadeRightUp{
      animation-name:fadeRightUpAnime;
      animation-duration: 1.5s;
      animation-fill-mode:forwards;
      opacity:0;
    }
    @keyframes fadeRightUpAnime{
      from {
        opacity: 0;
      transform: translate(100px, 100px);
      }
    
      to {
        opacity: 1;
      transform: translate(0, 0);
      }
    }

    .fadeUp {
      animation-name:fadeUpAnime;
      animation-duration:0.5s;
      animation-fill-mode:forwards;
      opacity: 0;
      }
      
      @keyframes fadeUpAnime{
        from {
          opacity: 0;
        transform: translateY(100px);
        }
      
        to {
          opacity: 1;
        transform: translateY(0);
        }
      }

      .closeUp {
        animation-name:closeUpAnime;
        animation-duration: 2s;
        animation-timing-function: ease-in;
        animation-fill-mode:forwards;
        opacity: 0;
        }
        
        @keyframes closeUpAnime{
          from {
            opacity: 0;
            filter: blur(10px);
          
          }
        
          to {
            opacity: 1;
            filter: blur(0);
          

          }
        }


      .simpleblur {
 
        animation: blur 1s ease-out;

        animation-fill-mode:forwards;
      }
      
      @keyframes blur {
        from {
          filter: blur(10px);
          opacity: 0;
        }
        to {
          filter: blur(0);
          opacity: 1;
        }
      }



.expansion {
  animation: expansion 2s ease-in;
  animation-fill-mode:forwards;
}
@keyframes expansion {
  from {
    background-size: 0% 100%;
    opacity: 0;
  }
  
  to {
    background-size: 86% 100%;
    opacity: 1;
  }

}





/*背景色が伸びて出現 共通*/
.bgextend{
  animation-name:bgextendAnimeBase;
  animation-duration:1s;
  animation-fill-mode:forwards;
  position: relative;
  overflow: hidden;/*　はみ出た色要素を隠す　*/
  opacity:0;
}

@keyframes bgextendAnimeBase{
  from {
    opacity:0;
  }

  to {
    opacity:1;  
}
}

/*中の要素*/
.bgappear{
  animation-name:bgextendAnimeSecond;
  animation-duration:1s;
  animation-delay: 0.6s;
  animation-fill-mode:forwards;
  opacity: 0;
}

@keyframes bgextendAnimeSecond{
  0% {
  opacity: 0;
  }
  100% {
  opacity: 1;
}
}

/*--------- 左から --------*/
.bgLRextend::before{
  animation-name:bgLRextendAnime;
  animation-duration:1s;
  animation-fill-mode:forwards;
    content: "";
    position: absolute;
    /* width: 100%; */
    --min-size_w: 80;
    --max-size_w: 300;
    width: var(--clamp-size_w);
    min-width: 352px;
    width: calc( 0.0444 * 100vw + 267px);
    /* width: clamp(80px, calc(0.5867 * 100vw - 140px), 300px); */
    /* height: 100%; */
    background-color: rgba(255, 255, 255, .36);/*伸びる背景色の設定*/
}
@keyframes bgLRextendAnime{
  0% {
    transform-origin:left;
    transform:scaleX(0);
  }
  50% {
    transform-origin:left;
    transform:scaleX(1);
  }
  50.001% {
    transform-origin:right;
  }
  100% {
    transform-origin:right;
    transform:scaleX(0);
  }
}

/*--------- 右から --------*/
.bgRLextend::before{
  animation-name:bgRLextendAnime;
  animation-duration:1s;
  animation-fill-mode:forwards;
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: var(--color-accent);/*伸びる背景色の設定*/
}
@keyframes bgRLextendAnime{
  0% {
    transform-origin:right;
    transform:scaleX(0);
  }
  50% {
    transform-origin:right;
    transform:scaleX(1);
  }
  50.001% {
    transform-origin:left;
  }
  100% {
    transform-origin:left;
    transform:scaleX(0);
  }
}
















.box {
  --box-width: 100rem;
  --box-height: 50rem;
  --frag-width: calc(var(--box-width) / var(--col));
  --frag-height: calc(var(--box-height) / var(--row));
  --img-url: url(../img/story_pc.webp);
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  width: var(--box-width);
  height: var(--box-height);
  position: relative;
}



.box.hide::after {
  opacity: 0;
}
.box.hide:hover::after {
  opacity: 0;
}
.box:hover::after {
  background-image: initial;
  font-size: 1.8rem;
}

.fragment {
  --x-offset: calc(var(--x) * var(--frag-width) * -1);
  --y-offset: calc(var(--y) * var(--frag-height) * -1);
  --rotateX: rotateX(0);
  --rotateY: rotateY(0);
  width: var(--frag-width);
  height: var(--frag-height);
  background: var(--img-url) var(--x-offset) var(--y-offset) / var(--box-width)
    var(--box-height) no-repeat;
  backface-visibility: hidden;
  will-change: transform;
  transform: var(--rotateX) var(--rotateY) scale(0.8);
  animation: flip var(--duration) linear var(--delay) forwards;
  opacity: 0;
}
@keyframes flip {
  0% {
    transform: var(--rotateX) var(--rotateY) scale(0.8);
    opacity: 0;
  }
  15% {
    transform: var(--rotateX) var(--rotateY) scale(0.8);
    opacity: 0;
  }
  70% {
    transform: rotateX(0) rotateY(0) scale(0.8);
    opacity: 1;
  }
  100% {
    transform: rotateX(0) rotateY(0) scale(1);
    opacity: 1;
  }
}